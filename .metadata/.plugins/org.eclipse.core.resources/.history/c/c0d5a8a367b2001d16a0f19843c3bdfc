package com.projectmoon.service;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.projectmoon.domain.AccountBookVO;
import com.projectmoon.domain.CommonVO;
import com.projectmoon.persistence.AccountBookDao;
import com.projectmoon.persistence.CdCommonDao;


@Service
//@Component
//* 서비스 계층(Service/Business layer)
//- 표현 계층(Presentation layer)과 영속 계층(Persistence layer) 사이를 연결하여
//	  두 계층이 직접적으로 통신하지 않도록 하는 역할
//- 트랜잭션(transaction) 관리
//- DB와 상과없이 데이터를 처리 가능
public class AccountBookServiceImpl implements AccountBookService{

	@Autowired
	private AccountBookDao accountBookDao;
	
	@Autowired
	private CdCommonDao cdCommonDao;
	
	@Override
	public int InsertAccountBook(AccountBookVO accountBookVO) {

		return accountBookDao.InsertAccountBook(accountBookVO);
	}

	@Override
	public List<AccountBookVO> SelectAccountBookList(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return accountBookDao.SelectAccountBookList(accountBookVO);
	}

	@Override
	public int UpdateAccountBook(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int DeleteAccountBook(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	@Override
	public int InsertAssetsManagement(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	@Override
	public List<AccountBookVO> SelectAssetsManagement(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return accountBookDao.SelectAssetsManagement(accountBookVO);
	}
	
	@Override
	public int UpdateAssetsManagement(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int DeleteAssetsManagement(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<AccountBookVO> getYear() {
		// TODO Auto-generated method stub
		return accountBookDao.getYear();
	}

	@Override
	public List<AccountBookVO> getMonth(AccountBookVO accountBookVO) {
		// TODO Auto-generated method stub
		return accountBookDao.getMonth(accountBookVO);
	}

	@Override
	public List<AccountBookVO> SelectSettle(AccountBookVO accountBookVO) {
		// 돌려줄 list 선언
		List<AccountBookVO> list;
		
		String month = accountBookVO.getMonth();
		String year = accountBookVO.getYear();
		
		// 전월 구하기
		int intmonth = Integer.parseInt(month);
		int intyear = Integer.parseInt(year);
		System.out.println(intmonth);
		intmonth = intmonth -1 ;
		if(intmonth == 0) {
			intyear = intyear -1;
			intmonth = 12;
		}
		System.out.println(intmonth);
		year = String.valueOf(intyear);
		if(intmonth < 10) {
			month = "0" + String.valueOf(intmonth);
		} else {
			month = String.valueOf(intmonth);
		}
		
		AccountBookVO prevVO = new AccountBookVO();
		prevVO.setMonth(month);
		prevVO.setYear(year);
		
		// 1. 은행 목록 가져오기
		CommonVO commonVO = new CommonVO();
		commonVO.setCode("BANK");
		List<CommonVO> bankList = cdCommonDao.selectCode(commonVO);
		
		// 2. 전월잔액
		for(int i = 0; i < bankList.size(); i++) {
			commonVO = bankList.get(i);
			String bank = commonVO.getMainCategory();
			prevVO.setBank(bank);
			AccountBookVO balanceVO = accountBookDao.SelectAssetsBalance(prevVO);
			int balance = Integer.parseInt(balanceVO.getAmount());
			
			// 3. 당월 수익 / 비용 & 이체 		
			// 3-1 수익 vo
			AccountBookVO revenueVO = new AccountBookVO();
			revenueVO.setBank(bank);
			revenueVO.setDivision("REVENUE");
			revenueVO = accountBookDao.SelectSumAssets(revenueVO);
			int revenue = Integer.parseInt(revenueVO.getAmount());
			
			// 3-2 비용 vo
			AccountBookVO costVO = new AccountBookVO();
			costVO.setBank(bank);
			costVO.setDivision("COST");
			costVO = accountBookDao.SelectSumAssets(costVO);
			int cost = Integer.parseInt(costVO.getAmount());
			
			// 3-3 이체from vo(비용처럼 마이너스)
			AccountBookVO transferFromVO = new AccountBookVO();
			transferFromVO.setDivision("TRANSFER");
			transferFromVO.setDivisionSubDetail(bank);
			transferFromVO = accountBookDao.SelectSumAssets(transferFromVO);
			int transferFrom = Integer.parseInt(transferFromVO.getAmount());
			
			// 3-4 이체to vo(수익처럼 플러스)
			AccountBookVO transferToVO = new AccountBookVO();
			transferToVO.setDivision("TRANSFER");
			transferToVO.setBank(bank);
			transferToVO = accountBookDao.SelectSumAssets(transferToVO);
			int transferTo = Integer.parseInt(transferToVO.getAmount());
				
			
		}
		
		
		
		
		return null;
	}


	


	
	
}
